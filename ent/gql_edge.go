// Code generated by entc, DO NOT EDIT.

package ent

import "context"

func (c *Contract) Users(ctx context.Context) ([]*User, error) {
	result, err := c.Edges.UsersOrErr()
	if IsNotLoaded(err) {
		result, err = c.QueryUsers().All(ctx)
	}
	return result, err
}

func (c *Contract) Property(ctx context.Context) (*Property, error) {
	result, err := c.Edges.PropertyOrErr()
	if IsNotLoaded(err) {
		result, err = c.QueryProperty().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (pr *Property) Owner(ctx context.Context) (*User, error) {
	result, err := pr.Edges.OwnerOrErr()
	if IsNotLoaded(err) {
		result, err = pr.QueryOwner().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (pr *Property) Contract(ctx context.Context) ([]*Contract, error) {
	result, err := pr.Edges.ContractOrErr()
	if IsNotLoaded(err) {
		result, err = pr.QueryContract().All(ctx)
	}
	return result, err
}

func (u *User) Properties(ctx context.Context) ([]*Property, error) {
	result, err := u.Edges.PropertiesOrErr()
	if IsNotLoaded(err) {
		result, err = u.QueryProperties().All(ctx)
	}
	return result, err
}

func (u *User) Contracts(ctx context.Context) ([]*Contract, error) {
	result, err := u.Edges.ContractsOrErr()
	if IsNotLoaded(err) {
		result, err = u.QueryContracts().All(ctx)
	}
	return result, err
}
