// Code generated by entc, DO NOT EDIT.

package property

import (
	"fmt"
	"io"
	"strconv"
)

const (
	// Label holds the string label denoting the property type in the database.
	Label = "property"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldClass holds the string denoting the class field in the database.
	FieldClass = "class"
	// FieldAddress holds the string denoting the address field in the database.
	FieldAddress = "address"
	// FieldCity holds the string denoting the city field in the database.
	FieldCity = "city"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldDeleted holds the string denoting the deleted field in the database.
	FieldDeleted = "deleted"
	// EdgeOwner holds the string denoting the owner edge name in mutations.
	EdgeOwner = "owner"
	// EdgeContract holds the string denoting the contract edge name in mutations.
	EdgeContract = "contract"
	// Table holds the table name of the property in the database.
	Table = "properties"
	// OwnerTable is the table that holds the owner relation/edge.
	OwnerTable = "properties"
	// OwnerInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	OwnerInverseTable = "users"
	// OwnerColumn is the table column denoting the owner relation/edge.
	OwnerColumn = "user_properties"
	// ContractTable is the table that holds the contract relation/edge.
	ContractTable = "contracts"
	// ContractInverseTable is the table name for the Contract entity.
	// It exists in this package in order to avoid circular dependency with the "contract" package.
	ContractInverseTable = "contracts"
	// ContractColumn is the table column denoting the contract relation/edge.
	ContractColumn = "property_contract"
)

// Columns holds all SQL columns for property fields.
var Columns = []string{
	FieldID,
	FieldClass,
	FieldAddress,
	FieldCity,
	FieldDescription,
	FieldDeleted,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "properties"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"user_properties",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// Class defines the type for the "class" enum field.
type Class string

// ClassAPARTMENT is the default value of the Class enum.
const DefaultClass = ClassAPARTMENT

// Class values.
const (
	ClassHOUSE     Class = "HOUSE"
	ClassAPARTMENT Class = "APARTMENT"
	ClassPREMISES  Class = "PREMISES"
	ClassOFFICE    Class = "OFFICE"
	ClassVEHICLE   Class = "VEHICLE"
)

func (c Class) String() string {
	return string(c)
}

// ClassValidator is a validator for the "class" field enum values. It is called by the builders before save.
func ClassValidator(c Class) error {
	switch c {
	case ClassHOUSE, ClassAPARTMENT, ClassPREMISES, ClassOFFICE, ClassVEHICLE:
		return nil
	default:
		return fmt.Errorf("property: invalid enum value for class field: %q", c)
	}
}

// MarshalGQL implements graphql.Marshaler interface.
func (c Class) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(c.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (c *Class) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*c = Class(str)
	if err := ClassValidator(*c); err != nil {
		return fmt.Errorf("%s is not a valid Class", str)
	}
	return nil
}
