// Code generated by entc, DO NOT EDIT.

package contract

import (
	"time"

	"entgo.io/bug/ent/predicate"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// StartDate applies equality check predicate on the "start_date" field. It's identical to StartDateEQ.
func StartDate(v time.Time) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStartDate), v))
	})
}

// EndDate applies equality check predicate on the "end_date" field. It's identical to EndDateEQ.
func EndDate(v time.Time) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEndDate), v))
	})
}

// PayAmount applies equality check predicate on the "pay_amount" field. It's identical to PayAmountEQ.
func PayAmount(v float64) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPayAmount), v))
	})
}

// PayDate applies equality check predicate on the "pay_date" field. It's identical to PayDateEQ.
func PayDate(v time.Time) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPayDate), v))
	})
}

// StartDateEQ applies the EQ predicate on the "start_date" field.
func StartDateEQ(v time.Time) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStartDate), v))
	})
}

// StartDateNEQ applies the NEQ predicate on the "start_date" field.
func StartDateNEQ(v time.Time) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStartDate), v))
	})
}

// StartDateIn applies the In predicate on the "start_date" field.
func StartDateIn(vs ...time.Time) predicate.Contract {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Contract(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStartDate), v...))
	})
}

// StartDateNotIn applies the NotIn predicate on the "start_date" field.
func StartDateNotIn(vs ...time.Time) predicate.Contract {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Contract(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStartDate), v...))
	})
}

// StartDateGT applies the GT predicate on the "start_date" field.
func StartDateGT(v time.Time) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStartDate), v))
	})
}

// StartDateGTE applies the GTE predicate on the "start_date" field.
func StartDateGTE(v time.Time) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStartDate), v))
	})
}

// StartDateLT applies the LT predicate on the "start_date" field.
func StartDateLT(v time.Time) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStartDate), v))
	})
}

// StartDateLTE applies the LTE predicate on the "start_date" field.
func StartDateLTE(v time.Time) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStartDate), v))
	})
}

// EndDateEQ applies the EQ predicate on the "end_date" field.
func EndDateEQ(v time.Time) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEndDate), v))
	})
}

// EndDateNEQ applies the NEQ predicate on the "end_date" field.
func EndDateNEQ(v time.Time) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEndDate), v))
	})
}

// EndDateIn applies the In predicate on the "end_date" field.
func EndDateIn(vs ...time.Time) predicate.Contract {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Contract(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldEndDate), v...))
	})
}

// EndDateNotIn applies the NotIn predicate on the "end_date" field.
func EndDateNotIn(vs ...time.Time) predicate.Contract {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Contract(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldEndDate), v...))
	})
}

// EndDateGT applies the GT predicate on the "end_date" field.
func EndDateGT(v time.Time) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEndDate), v))
	})
}

// EndDateGTE applies the GTE predicate on the "end_date" field.
func EndDateGTE(v time.Time) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEndDate), v))
	})
}

// EndDateLT applies the LT predicate on the "end_date" field.
func EndDateLT(v time.Time) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEndDate), v))
	})
}

// EndDateLTE applies the LTE predicate on the "end_date" field.
func EndDateLTE(v time.Time) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEndDate), v))
	})
}

// PayAmountEQ applies the EQ predicate on the "pay_amount" field.
func PayAmountEQ(v float64) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPayAmount), v))
	})
}

// PayAmountNEQ applies the NEQ predicate on the "pay_amount" field.
func PayAmountNEQ(v float64) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPayAmount), v))
	})
}

// PayAmountIn applies the In predicate on the "pay_amount" field.
func PayAmountIn(vs ...float64) predicate.Contract {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Contract(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPayAmount), v...))
	})
}

// PayAmountNotIn applies the NotIn predicate on the "pay_amount" field.
func PayAmountNotIn(vs ...float64) predicate.Contract {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Contract(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPayAmount), v...))
	})
}

// PayAmountGT applies the GT predicate on the "pay_amount" field.
func PayAmountGT(v float64) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPayAmount), v))
	})
}

// PayAmountGTE applies the GTE predicate on the "pay_amount" field.
func PayAmountGTE(v float64) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPayAmount), v))
	})
}

// PayAmountLT applies the LT predicate on the "pay_amount" field.
func PayAmountLT(v float64) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPayAmount), v))
	})
}

// PayAmountLTE applies the LTE predicate on the "pay_amount" field.
func PayAmountLTE(v float64) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPayAmount), v))
	})
}

// PayDateEQ applies the EQ predicate on the "pay_date" field.
func PayDateEQ(v time.Time) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPayDate), v))
	})
}

// PayDateNEQ applies the NEQ predicate on the "pay_date" field.
func PayDateNEQ(v time.Time) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPayDate), v))
	})
}

// PayDateIn applies the In predicate on the "pay_date" field.
func PayDateIn(vs ...time.Time) predicate.Contract {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Contract(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPayDate), v...))
	})
}

// PayDateNotIn applies the NotIn predicate on the "pay_date" field.
func PayDateNotIn(vs ...time.Time) predicate.Contract {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Contract(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPayDate), v...))
	})
}

// PayDateGT applies the GT predicate on the "pay_date" field.
func PayDateGT(v time.Time) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPayDate), v))
	})
}

// PayDateGTE applies the GTE predicate on the "pay_date" field.
func PayDateGTE(v time.Time) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPayDate), v))
	})
}

// PayDateLT applies the LT predicate on the "pay_date" field.
func PayDateLT(v time.Time) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPayDate), v))
	})
}

// PayDateLTE applies the LTE predicate on the "pay_date" field.
func PayDateLTE(v time.Time) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPayDate), v))
	})
}

// HasUsers applies the HasEdge predicate on the "users" edge.
func HasUsers() predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UsersTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, UsersTable, UsersPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUsersWith applies the HasEdge predicate on the "users" edge with a given conditions (other predicates).
func HasUsersWith(preds ...predicate.User) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UsersInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, UsersTable, UsersPrimaryKey...),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasProperty applies the HasEdge predicate on the "property" edge.
func HasProperty() predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(PropertyTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, PropertyTable, PropertyColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPropertyWith applies the HasEdge predicate on the "property" edge with a given conditions (other predicates).
func HasPropertyWith(preds ...predicate.Property) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(PropertyInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, PropertyTable, PropertyColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Contract) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Contract) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Contract) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		p(s.Not())
	})
}
